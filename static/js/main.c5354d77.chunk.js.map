{"version":3,"sources":["interfaces/initialStates.ts","redux/slices/notification.ts","utils/common.ts","redux/slices/gameBoard.ts","redux/reducers/index.ts","redux/store.ts","reportWebVitals.ts","components/Seo/Seo.tsx","pages/Error/Error.tsx","components/Shared/ErrorBoundary.tsx","routes/ScrollToTop.tsx","assets/logo.svg","components/Layout/Layout.tsx","components/Layout/index.tsx","pages/Home/Home.tsx","pages/Home/index.tsx","components/PlayerSideBar/PlayerRow.tsx","components/PlayerSideBar/Players.tsx","components/PlayerSideBar/index.tsx","components/Shared/PlayingCard.tsx","components/PlayingTable/PlayingTable.tsx","components/PlayingTable/index.tsx","pages/Game/Game.tsx","pages/Game/index.tsx","utils/card.ts","utils/deck.ts","utils/player.ts","utils/board.ts","pages/Start/Start.tsx","pages/Start/index.tsx","pages/Rules/rules.md","pages/Rules/Rules.tsx","pages/Rules/index.tsx","serviceWorker.ts","routes/Routes.tsx","routes/index.tsx","index.tsx","pages/Home/Home.module.scss","components/PlayerSideBar/PlayerRow.module.scss","components/Shared/PlayingCard.module.scss","components/PlayingTable/PlayingTable.module.scss"],"names":["initialNotificationState","alertType","message","initialBoardState","id","cardsInMiddle","players","turn","winner","initialState","notification","board","createSlice","name","reducers","show","state","action","payload","clear","actions","getNewIndex","currentIndex","newIndex","length","checkIfCardsMatch","playerCards","cards","modifiedCardsInMiddle","suit","slice","play","currentPlayer","findIndex","player","cardtoPlay","startIndex","console","log","playerName","getNextTurn","startGame","updateTurn","playerParams","map","updatePlayer","playerId","shuffle","shuffledCards","rootReducer","combineReducers","persistConfig","key","storage","history","createBrowserHistory","basename","process","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","logger","devTools","preloadedState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Seo","title","description","className","Helmet","titleTemplate","defaultTitle","charSet","content","rel","href","ErrorPage","error","color","onClick","push","ErrorBoundary","props","hasError","info","this","setState","Error","children","React","Component","ScrollToTop","pathname","useLocation","useEffect","window","scrollTo","top","left","behavior","Layout","component","to","src","logo","alt","activeClassName","connector","connect","Home","style","PlayerRow","notify","useState","editMode","setEditMode","useForm","register","handleSubmit","handleShuffle","array","temporaryValue","randomIndex","newArray","Math","floor","random","hasOwnProperty","shuffleCards","isPlayerTurn","cardDisplay","onSubmit","data","type","ref","required","disabled","Players","gameId","useParams","mapDispatch","dispatch","a","playTurn","modifiedValues","Promise","done","setTimeout","PlayingCard","card","playingCard","value","PlayingTable","playingTable","uid","Game","find","PlayerSideBar","Card","rank","Deck","suits","ranks","values","Array","fill","_","i","j","location1","location2","tmp","Player","Board","deck","addCards","shuffleDeck","numberOfCards","numberOfPlayers","splitWays","forEach","index","splice","playerCount","distributePlayerCards","pop","confirm","unshift","JSON","parse","stringify","e","Start","playerArr","errors","gameBoard","start","gameBoardJS","toPlainObj","height","item","boardId","Rules","markdown","setMarkDown","fetch","rules","res","text","final","getFile","plugins","gfm","isLocalhost","Boolean","location","hostname","match","config","navigator","URL","origin","addEventListener","swUrl","headers","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","RefreshToast","closeToast","Routes","newVersionAvailable","setNewVersionAvailable","postMessage","waitingWorker","setWaitingWorker","onServiceWorkerUpdate","waiting","toast","position","POSITION","TOP_RIGHT","autoClose","updateServiceWorker","toastProps","BOTTOM_RIGHT","dismiss","exact","path","persistor","persistStore","ReactDOM","render","loading","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c5354d77.chunk.js","sourcesContent":["import { AppState, Board, NotificationState } from \".\";\n\nexport const initialNotificationState: NotificationState = {\n  alertType: \"info\",\n  message: \"\",\n};\n\nexport const initialBoardState: Board = {\n  id: \"\",\n  cardsInMiddle: [],\n  players: [],\n  turn: \"\",\n  winner: null,\n};\n\nexport const initialState: AppState = {\n  notification: initialNotificationState,\n  board: initialBoardState,\n};\n\nexport interface Params {\n  [x: string]: string | undefined;\n  [x: number]: string | undefined;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { NotificationActionProps } from \"../../interfaces\";\nimport { initialNotificationState } from \"../../interfaces/initialStates\";\n\nconst notification = createSlice({\n  name: \"notification\",\n  initialState: initialNotificationState,\n  reducers: {\n    show(state, action: PayloadAction<NotificationActionProps>) {\n      state.alertType = action.payload.alertType;\n      state.message = action.payload.message;\n    },\n    clear(state) {\n      state.alertType = \"\";\n      state.message = \"\";\n    },\n  },\n});\n\nexport const { show, clear } = notification.actions;\n\nexport default notification.reducer;\n","import { Board, Card, Player } from \"../interfaces\";\n\nexport const shuffleCards = (array: Card[]): Card[] => {\n  var newArray: Card[] = [];\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    if (newArray.hasOwnProperty(currentIndex)) {\n      temporaryValue = newArray[currentIndex];\n    } else {\n      temporaryValue = array[currentIndex];\n    }\n    newArray[currentIndex] = array[randomIndex];\n    newArray[randomIndex] = temporaryValue;\n  }\n\n  return newArray;\n};\n\nconst getNewIndex = (currentIndex: number, board: Board) => {\n  let newIndex = currentIndex;\n  if (newIndex < board.players.length - 1) {\n    newIndex++;\n  } else if (newIndex === board.players.length - 1) {\n    newIndex = 0;\n  }\n  return newIndex;\n};\n\n// Set turn to next player\nconst getNextTurn = (currentIndex: number, board: Board) => {\n  const startIndex = currentIndex;\n  let newIndex = getNewIndex(currentIndex, board);\n\n  while (!board.players[newIndex].playerCards.length) {\n    newIndex = getNewIndex(newIndex, board);\n  }\n  if (startIndex === newIndex) {\n    console.log(`${board.players[startIndex].playerName} WINS`);\n    return null;\n  }\n  return board.players[newIndex].id;\n};\n\nexport const checkIfCardsMatch = (\n  cardsInMiddle: Card[],\n  playerCards: Card[]\n) => {\n  let cards: Card[] = [];\n  let modifiedCardsInMiddle: Card[] = [];\n  if (\n    cardsInMiddle.length > 1 &&\n    cardsInMiddle[0].suit === cardsInMiddle[1].suit\n  ) {\n    cards = [...playerCards, ...cardsInMiddle];\n    const cardtoPlay = cards[0];\n    modifiedCardsInMiddle = [cardtoPlay];\n    cards = cards.slice(1);\n    return { cards, cardsInMiddle: modifiedCardsInMiddle };\n  }\n  return null;\n};\n\n// Play a turn\nexport const play = (currentPlayer: Player, board: Board) => {\n  let cards: Card[] = [];\n  let cardsInMiddle: Card[] = [];\n  let turn: string | null = \"\";\n  const currentIndex = board.players.findIndex(\n    (player: Player) => player.id === currentPlayer.id\n  );\n  if (currentIndex || currentIndex === 0) {\n    if (currentPlayer.playerCards.length) {\n      const cardtoPlay = currentPlayer.playerCards[0];\n      cards = currentPlayer.playerCards.slice(1);\n      cardsInMiddle = [cardtoPlay, ...board.cardsInMiddle];\n    }\n    turn = getNextTurn(currentIndex, board);\n  }\n  return {\n    cardsInMiddle,\n    cards,\n    turn,\n  };\n};\n","import { createSlice, Dispatch, PayloadAction } from \"@reduxjs/toolkit\";\nimport { uid } from \"uid\";\nimport {\n  BoardActionProps,\n  BoardPlayActionProps,\n  BoardPlayerActionProps,\n  PlayActionProps,\n  Player,\n  TurnActionProps,\n  PlayerCardActionProps,\n} from \"../../interfaces\";\nimport { initialBoardState } from \"../../interfaces/initialStates\";\nimport Board from \"../../utils/board\";\nimport { play as playTurn, checkIfCardsMatch } from \"../../utils/common\";\n\nimport { history } from \"../store\";\nimport { show } from \"./notification\";\n\nconst board = createSlice({\n  name: \"game_board\",\n  initialState: initialBoardState,\n  reducers: {\n    startGame(state, { payload: { board } }: PayloadAction<BoardActionProps>) {\n      state.id = board.id;\n      state.players = board.players;\n      state.cardsInMiddle = board.cardsInMiddle;\n      state.turn = board.players[0].id;\n      state.winner = null;\n    },\n    updateTurn(\n      state,\n      { payload: { turn, player } }: PayloadAction<TurnActionProps>\n    ) {\n      state.turn = turn || \"\";\n      state.winner = turn ? null : player;\n    },\n    play(\n      state,\n      {\n        payload: { cards, cardsInMiddle, player: playerParams },\n      }: PayloadAction<PlayActionProps>\n    ) {\n      state.cardsInMiddle = [...cardsInMiddle];\n      state.players = state.players.map((player: Player) =>\n        player.id === playerParams.id\n          ? {\n              ...player,\n              playerCards: [...cards],\n            }\n          : player\n      );\n    },\n    updatePlayer(state, action: PayloadAction<BoardPlayerActionProps>) {\n      state.players = state.players.map((player: Player) =>\n        player.id === action.payload.playerId\n          ? {\n              ...player,\n              playerName: action.payload.name,\n            }\n          : player\n      );\n    },\n    shuffle(state, action: PayloadAction<PlayerCardActionProps>) {\n      state.players = state.players.map((player: Player) =>\n        player.id === action.payload.playerId\n          ? {\n              ...player,\n              playerCards: [...action.payload.shuffledCards],\n            }\n          : player\n      );\n    },\n  },\n});\n\nexport const {\n  startGame,\n  play,\n  updatePlayer,\n  shuffle,\n  updateTurn,\n} = board.actions;\n\nexport const start = (board: Board) => (dispatch: Dispatch) => {\n  const boardId = uid(8);\n  dispatch(\n    startGame({\n      board: {\n        id: boardId,\n        winner: null,\n        ...board,\n      },\n    })\n  );\n  history.push(`/game/${boardId}`);\n};\n\nexport const playAction = (payload: BoardPlayActionProps) => async (\n  dispatch: Dispatch\n) => {\n  const { cards, cardsInMiddle, turn } = playTurn(\n    payload.player,\n    payload.board\n  );\n  // Displatch play\n  dispatch(\n    play({\n      cards,\n      cardsInMiddle,\n      player: payload.player,\n    })\n  );\n\n  const modifiedValues = checkIfCardsMatch(cardsInMiddle, cards);\n  if (modifiedValues) {\n    await new Promise<void>((done) =>\n      setTimeout(() => {\n        dispatch(\n          play({\n            cards: [...modifiedValues.cards],\n            cardsInMiddle: [...modifiedValues.cardsInMiddle],\n            player: payload.player,\n          })\n        );\n        dispatch(\n          show({\n            alertType: \"info\",\n            message: `${payload.player.playerName} cleared the table`,\n          })\n        );\n        done();\n      }, 200)\n    );\n  }\n  // Dispatch next turn\n  dispatch(\n    updateTurn({\n      turn,\n      player: payload.player,\n    })\n  );\n};\n\nexport default board.reducer;\n","import { combineReducers } from \"redux\";\nimport notification from \"../slices/notification\";\nimport board from \"../slices/gameBoard\";\n\nconst rootReducer = combineReducers({\n  notification,\n  board,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore, Action } from \"@reduxjs/toolkit\";\nimport { createBrowserHistory } from \"history\";\nimport logger from \"redux-logger\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { ThunkAction } from \"redux-thunk\";\n\nimport { initialState } from \"../interfaces/initialStates\";\n\nimport rootReducer, { RootState } from \"./reducers\";\n\nconst persistConfig = {\n  key: \"cardz\",\n  storage,\n};\n\nexport const history = createBrowserHistory({\n  basename: process.env.PUBLIC_URL,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  devTools: process.env.NODE_ENV !== \"production\",\n  preloadedState: initialState,\n});\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\n\nexport default store;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\ninterface Props {\n  title: string;\n  description: string;\n}\n\nconst Seo = ({ title, description }: Props) => {\n  return (\n    <div className=\"application\">\n      <Helmet titleTemplate=\"%s | Cardz\" defaultTitle=\"Cardz\">\n        <meta charSet=\"utf-8\" />\n        <title>{title}</title>\n        <meta name=\"description\" content={description} />\n        <link rel=\"canonical\" href=\"http://mysite.com/example\" />\n      </Helmet>\n    </div>\n  );\n};\n\nexport default Seo;\n","import React from \"react\";\nimport Seo from \"../../components/Seo/Seo\";\nimport { history } from \"../../redux/store\";\n\ninterface ErrorPageProps {\n  error: string;\n  description: string;\n}\n\nconst ErrorPage: React.FC<ErrorPageProps> = ({ error, description }) => {\n  return (\n    <div className=\"container mx-auto h-screen\">\n      <Seo title={error} description={description} />\n      <div className=\"flex w-full flex-col h-screen justify-center items-center\">\n        <h2 title={error} className=\"font-semibold text-8xl\">\n          {error}\n        </h2>\n        <p color=\"textSecondary\">{description}</p>\n        <button\n          className=\"mt-10 bg-primary text-white p-2 rounded\"\n          onClick={() => history.push(\"/\")}\n        >\n          Back to Overview\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ErrorPage;\n","import React from \"react\";\nimport ErrorPage from \"../../pages/Error/Error\";\n\ninterface ErrorBoundaryProps {\n  hasError: boolean;\n}\nexport default class ErrorBoundary extends React.Component<\n  {},\n  ErrorBoundaryProps\n> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error: any, info: any) {\n    // eslint-disable-next-line no-console\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <ErrorPage\n          error=\"Oops!\"\n          description=\"Something went wrong. Please contact you administrator\"\n        />\n      );\n    }\n    return this.props.children;\n  }\n}\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      left: 0,\n      behavior: \"smooth\",\n    });\n  }, [pathname]);\n\n  return null;\n}\n","export default __webpack_public_path__ + \"static/media/logo.13af2aec.svg\";","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport logo from \"../../assets/logo.svg\";\nimport { PropsFromRedux } from \".\";\n\ninterface Props extends PropsFromRedux {\n  component: React.ReactNode;\n}\n\nconst Layout = ({ component, board }: Props) => {\n  return (\n    <div className=\"font-serif w-full\">\n      <div className=\"flex container mx-auto justify-between\">\n        <div>\n          <NavLink to=\"/\">\n            <img src={logo} alt=\"Cardz logo\" className=\"h-20\" />\n          </NavLink>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          {board.id && (\n            <NavLink\n              activeClassName=\"hidden\"\n              to={`/game/${board.id}`}\n              className=\"btn btn-secondary hover:opacity-80\"\n            >\n              Continue Game\n            </NavLink>\n          )}\n          <NavLink\n            activeClassName=\"hidden\"\n            to=\"/new-game\"\n            className=\"btn btn-secondary hover:opacity-80\"\n          >\n            New Game\n          </NavLink>\n          <NavLink\n            activeClassName=\"hidden\"\n            to=\"/rules\"\n            className=\"btn btn-primary hover:opacity-80\"\n          >\n            Rules\n          </NavLink>\n        </div>\n      </div>\n      <main className=\"w-full\">\n        <section>{component}</section>\n      </main>\n    </div>\n  );\n};\n\nexport default Layout;\n","import { connect, ConnectedProps } from \"react-redux\";\nimport { AppState } from \"../../interfaces\";\nimport Layout from \"./Layout\";\n\nconst mapState = (state: AppState) => ({\n  board: state.board,\n});\n\nconst mapDispatch = {};\n\nconst connector = connect(mapState, mapDispatch);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Layout);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport logo from \"../../assets/logo.svg\";\nimport Seo from \"../../components/Seo/Seo\";\nimport { PropsFromRedux } from \".\";\nimport style from \"./Home.module.scss\";\n\ninterface Props extends PropsFromRedux {}\n\nconst Home = ({ board }: Props) => {\n  return (\n    <div className=\"container flex flex-col justify-center items-center mx-auto h-screen\">\n      <Seo title=\"Play\" description=\"Play Cardz\" />\n      <div className=\"w-full text-center\">\n        <img src={logo} className=\"inline-block w-96\" alt=\"cardz logo\" />\n      </div>\n      <div className=\"w-full flex flex-col my-8 items-center justify-center \">\n        {board.id && (\n          <Link\n            className={`mb-12 btn btn-secondary ${style[\"homebtn-secondary\"]}`}\n            to={`/game/${board.id}`}\n          >\n            Continue Game\n          </Link>\n        )}\n\n        <Link\n          className={`mb-12 btn btn-secondary ${style[\"homebtn-secondary\"]}`}\n          to=\"/new-game\"\n        >\n          New Game\n        </Link>\n        <Link\n          className={`mb-12 btn btn-primary ${style[\"homebtn-primary\"]}`}\n          to=\"/rules\"\n        >\n          Rules\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import { connect, ConnectedProps } from \"react-redux\";\nimport { AppState } from \"../../interfaces\";\nimport Home from \"./Home\";\n\nconst mapState = (state: AppState) => ({\n  board: state.board,\n});\n\nconst mapDispatch = {};\n\nconst connector = connect(mapState, mapDispatch);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Home);\n","import React, { useState } from \"react\";\nimport {\n  BoardPlayActionProps,\n  BoardPlayerActionProps,\n  Player,\n  Board,\n  PlayerCardActionProps,\n  NotificationActionProps,\n} from \"../../interfaces\";\nimport style from \"./PlayerRow.module.scss\";\nimport { AiOutlineEdit } from \"react-icons/ai\";\nimport { FiCheck, FiX } from \"react-icons/fi\";\n\nimport { useForm } from \"react-hook-form\";\nimport { ActionCreatorWithPayload } from \"@reduxjs/toolkit\";\nimport { shuffleCards } from \"../../utils/common\";\n\ninterface Props {\n  board: Board;\n  player: Player;\n  updatePlayer: ActionCreatorWithPayload<BoardPlayerActionProps, string>;\n  shuffle: ActionCreatorWithPayload<PlayerCardActionProps, string>;\n  play: (payload: BoardPlayActionProps) => void;\n  notify: ActionCreatorWithPayload<NotificationActionProps, string>;\n}\n\nconst PlayerRow = ({\n  player,\n  updatePlayer,\n  shuffle,\n  board,\n  notify,\n  play,\n}: Props) => {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const { register, handleSubmit } = useForm();\n\n  const setPlayerName = (data: any) => {\n    updatePlayer({\n      name: data[`player_${player.id}_name`],\n      playerId: player.id,\n    });\n    setEditMode(false);\n  };\n\n  const handleShuffle = () => {\n    const shuffledCards = shuffleCards(player.playerCards);\n    shuffle({\n      playerId: player.id,\n      shuffledCards,\n    });\n    notify({\n      alertType: \"success\",\n      message: `${player.playerName} shuffled cards`,\n    });\n  };\n\n  const playTurn = () => {\n    if (player.id !== board.turn) {\n      notify({\n        alertType: \"error\",\n        message: `Not your turn ${player.playerName}`,\n      });\n      return;\n    }\n    play({\n      player,\n      board,\n    });\n  };\n\n  const isPlayerTurn = player.id === board.turn;\n\n  return (\n    <div\n      className={`w-full flex py-6  p-2 ${isPlayerTurn ? \"bg-green-200\" : \"\"} ${\n        !player.playerCards.length && \"bg-gray-100\"\n      }`}\n    >\n      <div className={`${style.cardDisplay} rounded w-1/6`}></div>\n      <div className=\"w-5/6\">\n        {player.playerCards.length ? (\n          <>\n            <h4 className={`font-semibold flex items-center `}>\n              {editMode ? (\n                <form onSubmit={handleSubmit(setPlayerName)}>\n                  <input\n                    type=\"text\"\n                    className=\"border border-gray-300 text-sm rounded p-1\"\n                    ref={register({ required: true })}\n                    name={`player_${player.id}_name`}\n                  />\n                  <button\n                    className=\"bg-green-500 text-white rounded p-1\"\n                    type=\"submit\"\n                  >\n                    <FiCheck />\n                  </button>\n                  <button\n                    className=\"bg-red-500 rounded p-1 text-white\"\n                    onClick={() => setEditMode(false)}\n                  >\n                    <FiX />\n                  </button>\n                </form>\n              ) : (\n                <>\n                  {player.playerName}{\" \"}\n                  <button onClick={() => setEditMode(true)}>\n                    <AiOutlineEdit className=\"text-gray-400\" />\n                  </button>\n                  {isPlayerTurn && (\n                    <span className=\"bg-primary text-white rounded p-1 text-xs ml-auto\">\n                      Your turn\n                    </span>\n                  )}\n                </>\n              )}\n            </h4>\n            <p className=\"text-secondary text-sm\">\n              {player.playerCards.length} Cards\n            </p>\n            {isPlayerTurn && (\n              <div className=\"w-full flex justify-start\">\n                <button\n                  disabled={!player.playerCards.length}\n                  onClick={() => handleShuffle()}\n                  className={`btn btn-secondary mr-4 ${style[\"homebtn-secondary\"]}`}\n                >\n                  Shuffle\n                </button>\n                <button\n                  disabled={!player.playerCards.length}\n                  onClick={() => playTurn()}\n                  className={`btn btn-primary ${style[\"homebtn-primary\"]}`}\n                >\n                  Play\n                </button>\n              </div>\n            )}\n          </>\n        ) : (\n          <h4 className={`font-semibold flex items-center text-gray-400`}>\n            {player.playerName} has no cards left\n          </h4>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerRow;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Params } from \"../../interfaces/initialStates\";\nimport PlayerRow from \"./PlayerRow\";\nimport { PropsFromRedux } from \".\";\nimport { Player } from \"../../interfaces\";\n\ninterface Props extends PropsFromRedux {}\n\nconst Players = ({ board, updatePlayer, shuffle, play, notify }: Props) => {\n  const { gameId } = useParams<Params>();\n\n  return (\n    <div className=\"bg-white rounded\">\n      <h4 className=\"text-secondary font-bold\">Game {gameId}</h4>\n      <div className=\"w-full\">\n        {board.players.map((player: Player) => (\n          <PlayerRow\n            notify={notify}\n            board={board}\n            updatePlayer={updatePlayer}\n            shuffle={shuffle}\n            play={play}\n            key={player.id}\n            player={player}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Players;\n","import { connect, ConnectedProps } from \"react-redux\";\nimport { AppState } from \"../../interfaces\";\nimport Players from \"./Players\";\nimport {\n  updatePlayer,\n  shuffle,\n  playAction,\n} from \"../../redux/slices/gameBoard\";\nimport { show } from \"../../redux/slices/notification\";\n\nconst mapState = (state: AppState) => ({\n  board: state.board,\n  notification: state.notification,\n});\n\nconst mapDispatch = {\n  notify: show,\n  updatePlayer,\n  shuffle,\n  play: playAction,\n};\n\nconst connector = connect(mapState, mapDispatch);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Players);\n","import React from \"react\";\nimport Card from \"../../utils/card\";\nimport style from \"./PlayingCard.module.scss\";\n\ninterface Props {\n  card: Card;\n}\n\nconst PlayingCard = ({ card }: Props) => {\n  return (\n    <div\n      className={`${style.playingCard} ${style[card.suit]} ${\n        style[`cards_${card.value}`]\n      } justify-center items-center flex flex-wrap text-black font-bold`}\n    >\n      &nbsp;\n    </div>\n  );\n};\n\nexport default PlayingCard;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { uid } from \"uid\";\nimport { PropsFromRedux } from \".\";\nimport Card from \"../../utils/card\";\nimport PlayingCard from \"../Shared/PlayingCard\";\nimport style from \"./PlayingTable.module.scss\";\n\ninterface Props extends PropsFromRedux {}\n\nconst PlayingTable = ({ board }: Props) => {\n  return (\n    <div className={`flex w-full h-full  ${style.playingTable}`}>\n      <div className=\"w-9/12 justify-center items-center flex\">\n        {board.winner ? (\n          <Link\n            to=\"/new-game\"\n            className=\"btn btn-secondary font-semibold border-b-8 border-yellow-700 text-sm p-6 w-96 hover:border-b-4\"\n          >\n            New Game\n          </Link>\n        ) : (\n          <>\n            {board.cardsInMiddle.slice(0, 6).map((card: Card) => (\n              <PlayingCard key={uid(8)} card={card} />\n            ))}\n          </>\n        )}\n      </div>\n      <div className=\"w-3/12 bg-yellow-900 flex justify-center items-center h-full\">\n        <div className=\"p-8 w-full text-center\">\n          <h4>Number of Cards in middle</h4>\n          <p className=\"text-6xl font-semibold\">{board.cardsInMiddle.length}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlayingTable;\n","import { connect, ConnectedProps } from \"react-redux\";\nimport { AppState } from \"../../interfaces\";\nimport PlayingTable from \"./PlayingTable\";\n\nconst mapState = (state: AppState) => ({\n  board: state.board,\n});\n\nconst mapDispatch = {};\n\nconst connector = connect(mapState, mapDispatch);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(PlayingTable);\n","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PlayerSideBar from \"../../components/PlayerSideBar\";\nimport PlayingTable from \"../../components/PlayingTable\";\nimport Seo from \"../../components/Seo/Seo\";\nimport { Params } from \"../../interfaces/initialStates\";\nimport { PropsFromRedux } from \".\";\nimport { Player } from \"../../interfaces\";\n\ninterface Props extends PropsFromRedux {}\n\nconst Game = ({ board, notify }: Props) => {\n  const { gameId } = useParams<Params>();\n  const currentPlayer = board.players.find(\n    (player: Player) => player.id === board.turn\n  );\n  useEffect(() => {\n    if (board.winner) {\n      notify({\n        alertType: \"success\",\n        message: `${board.winner.playerName} WINS!!!`,\n      });\n    }\n  }, [board.winner, notify]);\n\n  return (\n    <div className=\"container flex items-center my-12 mx-auto\">\n      <Seo title={`Game ${gameId}`} description={`Playing Game ${gameId}`} />\n      <div className=\"w-3/12 bg-white text-gray-700 rounded p-4\">\n        <PlayerSideBar />\n      </div>\n      <div className=\"w-9/12 p-8\">\n        <h4 className=\"text-center text-2xl font-semibold text-secondary mb-8\">\n          {board.winner\n            ? `${board.winner.playerName} WINS!!!`\n            : `${currentPlayer?.playerName}'s Turn`}\n        </h4>\n        <PlayingTable />\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import { connect, ConnectedProps } from \"react-redux\";\nimport { AppState } from \"../../interfaces\";\nimport { show } from \"../../redux/slices/notification\";\nimport Game from \"./Game\";\n\nconst mapState = (state: AppState) => ({\n  board: state.board,\n});\n\nconst mapDispatch = {\n  notify: show,\n};\n\nconst connector = connect(mapState, mapDispatch);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Game);\n","export type Suit = \"spade\" | \"heart\" | \"diamond\" | \"clubs\";\nexport type Rank =\n  | \"ace\"\n  | \"2\"\n  | \"3\"\n  | \"4\"\n  | \"5\"\n  | \"6\"\n  | \"7\"\n  | \"8\"\n  | \"9\"\n  | \"10\"\n  | \"jack\"\n  | \"queen\"\n  | \"king\";\nexport type CardValue =\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14;\n\nclass Card {\n  suit: Suit;\n  rank: Rank;\n  value: CardValue;\n  constructor(suit: Suit, rank: Rank, value: CardValue) {\n    this.suit = suit;\n    this.rank = rank;\n    this.value = value;\n  }\n}\n\nexport default Card;\n","import Card, { Suit, Rank, CardValue } from \"./card\";\n\nclass Deck {\n  cards: Card[];\n  constructor() {\n    this.cards = [];\n  }\n  addCards(): void {\n    let suits: Suit[] = [\"clubs\", \"diamond\", \"heart\", \"spade\"];\n    let ranks: Rank[] = [\n      \"ace\",\n      \"2\",\n      \"3\",\n      \"4\",\n      \"5\",\n      \"6\",\n      \"7\",\n      \"8\",\n      \"9\",\n      \"10\",\n      \"jack\",\n      \"queen\",\n      \"king\",\n    ];\n    let values: CardValue[] = Array(13)\n      .fill(null)\n      .map((_, i) => (i + 1) as CardValue);\n    for (let i = 0; i < suits.length; i++) {\n      for (let j = 0; j < ranks.length; j++) {\n        this.cards.push(new Card(suits[i], ranks[j], values[j]));\n      }\n    }\n  }\n  /* Found this lovely shuffle logic online */\n  shuffleDeck(): void {\n    let location1: number, location2: number, tmp: Card;\n    for (let i = 0; i < 1000; i++) {\n      location1 = Math.floor(Math.random() * this.cards.length);\n      location2 = Math.floor(Math.random() * this.cards.length);\n      tmp = this.cards[location1];\n      this.cards[location1] = this.cards[location2];\n      this.cards[location2] = tmp;\n    }\n  }\n}\n\nexport default Deck;\n","import Card from \"./card\";\nimport { uid } from \"uid\";\n\nclass Player {\n  id: string;\n  playerName: string;\n  playerCards: Card[];\n  constructor(name: string) {\n    this.id = uid(8);\n    this.playerName = name;\n    this.playerCards = [];\n  }\n  modifyPlayer(name: string) {\n    this.playerName = name;\n  }\n  shuffleCards(): void {\n    let location1: number, location2: number, tmp: Card;\n    for (let i = 0; i < 1000; i++) {\n      location1 = Math.floor(Math.random() * this.playerCards.length);\n      location2 = Math.floor(Math.random() * this.playerCards.length);\n      tmp = this.playerCards[location1];\n      this.playerCards[location1] = this.playerCards[location2];\n      this.playerCards[location2] = tmp;\n    }\n  }\n}\n\nexport default Player;\n","import Card from \"./card\";\nimport Deck from \"./deck\";\nimport Player from \"./player\";\n\nclass Board {\n  cardsInMiddle: Card[];\n  players: Player[];\n  turn: string;\n\n  constructor() {\n    this.cardsInMiddle = [];\n    this.players = [];\n    this.turn = \"\";\n  }\n\n  // Distribute cards on game start\n  private distributePlayerCards() {\n    const deck = new Deck();\n    deck.addCards();\n    deck.shuffleDeck();\n    const numberOfCards = deck.cards.length;\n    const numberOfPlayers = this.players.length;\n    const splitWays = Math.floor(numberOfCards / numberOfPlayers);\n    // Give equal number of cards\n    this.players.forEach((player: Player, index: number) => {\n      player.playerCards = deck.cards.splice(0, splitWays);\n    });\n    // Share leftover cards\n    if (deck.cards.length) {\n      deck.cards.forEach((card: Card, index: number) => {\n        this.players[index].playerCards.push(card);\n      });\n    }\n  }\n\n  // Start game\n  start(playerCount: number) {\n    for (let i = 0; i <= playerCount - 1; i++) {\n      this.players.push(new Player(`Player ${i + 1}`));\n    }\n    this.distributePlayerCards();\n    // Set current turn to player 1\n    this.turn = this.players[0].id;\n  }\n\n  private getNewIndex(currentIndex: number) {\n    let newIndex = currentIndex;\n    if (newIndex < this.players.length - 1) {\n      newIndex++;\n    } else if (newIndex === this.players.length - 1) {\n      newIndex = 0;\n    }\n    return newIndex;\n  }\n\n  // Set turn to next player\n  private getNextTurn(currentIndex: number) {\n    const startIndex = currentIndex;\n    let newIndex = this.getNewIndex(currentIndex);\n\n    while (!this.players[newIndex].playerCards.length) {\n      newIndex = this.getNewIndex(newIndex);\n    }\n    if (startIndex === newIndex) {\n      console.log(`${this.players[startIndex].playerName} WINS`);\n      return `${this.players[startIndex].playerName} WINS`;\n    }\n    this.turn = this.players[newIndex].id;\n  }\n\n  private checkIfCardsMatch(currentIndex: number) {\n    // If card shapes match\n    if (\n      this.cardsInMiddle.length > 1 &&\n      this.cardsInMiddle[0].suit === this.cardsInMiddle[1].suit\n    ) {\n      // Push all cards in middle to player's stack\n      this.players[currentIndex].playerCards.push(...this.cardsInMiddle);\n      // Empty Cards in middle\n      this.cardsInMiddle = [];\n      // Pop card on top of player's stack to middle\n      const cardtoPlay = this.players[currentIndex].playerCards.pop();\n      cardtoPlay && this.cardsInMiddle.push(cardtoPlay);\n    }\n  }\n\n  resetGame() {\n    window.confirm(\"Are you sure you want to start a new game\");\n    this.cardsInMiddle = [];\n    this.players = [];\n    this.turn = \"\";\n  }\n\n  // Play a turn\n  play(playerId: string) {\n    // Check if correct turn\n    if (playerId !== this.turn) return console.log(\"Not your turn\");\n\n    // Get player index\n    const currentIndex = this.players.findIndex(\n      (player: Player) => player.id === playerId\n    );\n\n    // If found\n    if (currentIndex || currentIndex === 0) {\n      // Check if user has cards\n      if (this.players[currentIndex].playerCards.length) {\n        // Pop card off stack\n        const cardtoPlay = this.players[currentIndex].playerCards.pop();\n        // Add card to top of cards in middle\n        cardtoPlay && this.cardsInMiddle.unshift(cardtoPlay);\n        // Check if its a match\n        this.checkIfCardsMatch(currentIndex);\n      }\n      // Move turn to next player\n      this.getNextTurn(currentIndex);\n    }\n  }\n  toPlainObj() {\n    let plainObj;\n    try {\n      plainObj = JSON.parse(JSON.stringify(this));\n      return plainObj;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport Seo from \"../../components/Seo/Seo\";\nimport { PropsFromRedux } from \".\";\nimport Board from \"../../utils/board\";\n\ninterface Props extends PropsFromRedux {}\n\nconst Start = ({ startGame }: Props) => {\n  const playerArr = Array(3)\n    .fill(null)\n    .map((_, i) => i + 2);\n  const { register, handleSubmit, errors } = useForm();\n  const onSubmit = (data: any) => {\n    let gameBoard = new Board();\n    gameBoard.start(data.numberOfPlayers);\n    const gameBoardJS = gameBoard.toPlainObj();\n    startGame(gameBoardJS);\n  };\n\n  return (\n    <div className=\"w-full\">\n      <Seo title=\"New Game\" description=\"Create New Cardz Game\" />\n      <form\n        onSubmit={handleSubmit(onSubmit)}\n        style={{ height: \"50vh\" }}\n        className=\"container justify-center flex flex-col items-center mx-auto my-16\"\n      >\n        <select\n          name=\"numberOfPlayers\"\n          ref={register({ required: true })}\n          className=\"bg-white w-96 rounded px-2 shadow-sm text-gray-700 py-4\"\n        >\n          <option value=\"\">Select number of players</option>\n          {playerArr.map((item) => (\n            <option key={item} value={item}>\n              {item} Player{item > 1 && \"s\"}{\" \"}\n            </option>\n          ))}\n        </select>\n        {errors.numberOfPlayers && (\n          <span className=\"text-xs my-3 text-white\">\n            Select number of players\n          </span>\n        )}\n        <button type=\"submit\" className={`my-8 w-96 p-4 btn btn-secondary`}>\n          Start Game\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Start;\n","import { connect, ConnectedProps } from \"react-redux\";\nimport { AppState } from \"../../interfaces\";\nimport Start from \"./Start\";\nimport { start } from \"../../redux/slices/gameBoard\";\n\nconst mapState = ({ board }: AppState) => ({\n  board,\n});\n\nconst mapDispatch = {\n  startGame: start,\n};\n\nconst connector = connect(mapState, mapDispatch);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Start);\n","export default __webpack_public_path__ + \"static/media/rules.5c94dd36.md\";","import React, { useEffect, useState } from \"react\";\nimport Seo from \"../../components/Seo/Seo\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from \"remark-gfm\";\nimport rules from \"./rules.md\";\n\ninterface Props {}\n\nconst Rules = (props: Props) => {\n  const [markdown, setMarkDown] = useState<string>(\"\");\n  useEffect(() => {\n    const getFile = async () => {\n      const res = await fetch(rules);\n      const final = await res.text();\n      setMarkDown(final);\n    };\n    getFile();\n  }, []);\n\n  return (\n    <div>\n      <Seo title=\"Rules\" description=\"Game Rules\" />\n      <div className=\"container mx-auto\">\n        <div className={`w-full bg-white p-8 my-16 rounded text-gray-700`}>\n          <ReactMarkdown plugins={[gfm]} children={markdown}></ReactMarkdown>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Rules;\n","import { connect, ConnectedProps } from \"react-redux\";\nimport { AppState } from \"../../interfaces\";\nimport Rules from \"./Rules\";\n\nconst mapState = (state: AppState) => ({});\n\nconst mapDispatch = {};\n\nconst connector = connect(mapState, mapDispatch);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Rules);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Router, Route, Switch } from \"react-router\";\nimport { ToastContainer, toast, ToastContentProps } from \"react-toastify\";\nimport ScrollToTop from \"./ScrollToTop\";\nimport { PropsFromRedux } from \".\";\nimport Layout from \"../components/Layout\";\nimport ErrorPage from \"../pages/Error/Error\";\nimport Home from \"../pages/Home\";\nimport Game from \"../pages/Game\";\nimport Start from \"../pages/Start\";\nimport Rules from \"../pages/Rules\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport * as serviceWorker from \"../serviceWorker\";\nimport { history } from \"../redux/store\";\n\ninterface RefrestToastProps extends ToastContentProps {\n  action: () => void;\n}\n\nconst RefreshToast = ({ closeToast, action }: RefrestToastProps) => {\n  const close = () => {\n    action();\n    closeToast && closeToast();\n  };\n  return (\n    <div>\n      New updates available\n      <button onClick={close}>Reload</button>\n    </div>\n  );\n};\n\nconst Routes: React.FC<PropsFromRedux> = ({ notification, clear }) => {\n  const [newVersionAvailable, setNewVersionAvailable] = useState(false);\n  const [waitingWorker, setWaitingWorker] = useState<any>({\n    postMessage: (message: any) => message,\n  });\n\n  const onServiceWorkerUpdate = (registration: ServiceWorkerRegistration) => {\n    setWaitingWorker(registration?.waiting);\n    if (registration) setNewVersionAvailable(true);\n  };\n\n  useEffect(() => {\n    if (process.env.NODE_ENV === \"production\") {\n      serviceWorker.register({ onUpdate: onServiceWorkerUpdate });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (notification.alertType && notification.message) {\n      toast[notification.alertType](notification.message, {\n        position: toast.POSITION.TOP_RIGHT,\n        autoClose: 3000,\n      });\n    }\n    return () => {\n      clear();\n    };\n  }, [clear, notification.alertType, notification.message]);\n\n  useEffect(() => {\n    const updateServiceWorker = () => {\n      waitingWorker && waitingWorker.postMessage({ type: \"SKIP_WAITING\" });\n      setNewVersionAvailable(false);\n      window.location.reload();\n    };\n\n    const notify = () =>\n      toast(\n        ({ closeToast, toastProps }: RefrestToastProps) => (\n          <RefreshToast\n            closeToast={closeToast}\n            toastProps={toastProps}\n            action={updateServiceWorker}\n          />\n        ),\n        {\n          position: toast.POSITION.BOTTOM_RIGHT,\n          autoClose: false,\n        }\n      );\n    if (newVersionAvailable) {\n      notify();\n    }\n    return () => {\n      toast.dismiss();\n    };\n  }, [newVersionAvailable, waitingWorker]);\n\n  return (\n    <Router history={history}>\n      <ToastContainer />\n      <ScrollToTop />\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/rules\">\n          <Layout component={<Rules />} />\n        </Route>\n        <Route path=\"/new-game\">\n          <Layout component={<Start />} />\n        </Route>\n        <Route path=\"/game/:gameId\">\n          <Layout component={<Game />} />\n        </Route>\n        <Route>\n          <Layout\n            component={\n              <ErrorPage\n                error=\"404\"\n                description=\"The page you are looking for does not exist\"\n              />\n            }\n          />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Routes;\n","import { connect, ConnectedProps } from \"react-redux\";\nimport { AppState } from \"../interfaces\";\nimport { clear } from \"../redux/slices/notification\";\nimport Routes from \"./Routes\";\n\nconst mapState = (state: AppState) => ({\n  notification: state.notification,\n});\n\nconst mapDispatch = {\n  clear,\n};\n\nconst connector = connect(mapState, mapDispatch);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Routes);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { persistStore } from \"redux-persist\";\nimport store from \"./redux/store\";\nimport \"./index.scss\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport ErrorBoundary from \"./components/Shared/ErrorBoundary\";\nimport Routes from \"./routes\";\n\nconst persistor = persistStore(store);\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <ErrorBoundary>\n        <Routes />\n      </ErrorBoundary>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"homebtn-secondary\":\"Home_homebtn-secondary__1LzFL\",\"homebtn-primary\":\"Home_homebtn-primary__2Syum\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardDisplay\":\"PlayerRow_cardDisplay__1oHvV\",\"homebtn-secondary\":\"PlayerRow_homebtn-secondary__2YUdG\",\"homebtn-primary\":\"PlayerRow_homebtn-primary__1HPbh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playingCard\":\"PlayingCard_playingCard__GLLKI\",\"heart\":\"PlayingCard_heart__2nIzG\",\"spade\":\"PlayingCard_spade__roc_H\",\"diamond\":\"PlayingCard_diamond__1hQju\",\"clubs\":\"PlayingCard_clubs__1XRZY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playingTable\":\"PlayingTable_playingTable__1LhOk\"};"],"sourceRoot":""}